// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fib.proto

package sartv1connect

import (
	__ "."
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FibApiName is the fully-qualified name of the FibApi service.
	FibApiName = "sart.v1.FibApi"
)

// FibApiClient is a client for the sart.v1.FibApi service.
type FibApiClient interface {
	GetRoute(context.Context, *connect_go.Request[__.GetRouteRequest]) (*connect_go.Response[__.GetRouteResponse], error)
	ListRoutes(context.Context, *connect_go.Request[__.ListRoutesRequest]) (*connect_go.Response[__.ListRoutesResponse], error)
	AddRoute(context.Context, *connect_go.Request[__.AddRouteRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteRoute(context.Context, *connect_go.Request[__.DeleteRouteRequest]) (*connect_go.Response[emptypb.Empty], error)
	AddMultiPathRoute(context.Context, *connect_go.Request[__.AddMultiPathRouteRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteMultiPathRoute(context.Context, *connect_go.Request[__.DeleteMultiPathRouteRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewFibApiClient constructs a client for the sart.v1.FibApi service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFibApiClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FibApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fibApiClient{
		getRoute: connect_go.NewClient[__.GetRouteRequest, __.GetRouteResponse](
			httpClient,
			baseURL+"/sart.v1.FibApi/GetRoute",
			opts...,
		),
		listRoutes: connect_go.NewClient[__.ListRoutesRequest, __.ListRoutesResponse](
			httpClient,
			baseURL+"/sart.v1.FibApi/ListRoutes",
			opts...,
		),
		addRoute: connect_go.NewClient[__.AddRouteRequest, emptypb.Empty](
			httpClient,
			baseURL+"/sart.v1.FibApi/AddRoute",
			opts...,
		),
		deleteRoute: connect_go.NewClient[__.DeleteRouteRequest, emptypb.Empty](
			httpClient,
			baseURL+"/sart.v1.FibApi/DeleteRoute",
			opts...,
		),
		addMultiPathRoute: connect_go.NewClient[__.AddMultiPathRouteRequest, emptypb.Empty](
			httpClient,
			baseURL+"/sart.v1.FibApi/AddMultiPathRoute",
			opts...,
		),
		deleteMultiPathRoute: connect_go.NewClient[__.DeleteMultiPathRouteRequest, emptypb.Empty](
			httpClient,
			baseURL+"/sart.v1.FibApi/DeleteMultiPathRoute",
			opts...,
		),
	}
}

// fibApiClient implements FibApiClient.
type fibApiClient struct {
	getRoute             *connect_go.Client[__.GetRouteRequest, __.GetRouteResponse]
	listRoutes           *connect_go.Client[__.ListRoutesRequest, __.ListRoutesResponse]
	addRoute             *connect_go.Client[__.AddRouteRequest, emptypb.Empty]
	deleteRoute          *connect_go.Client[__.DeleteRouteRequest, emptypb.Empty]
	addMultiPathRoute    *connect_go.Client[__.AddMultiPathRouteRequest, emptypb.Empty]
	deleteMultiPathRoute *connect_go.Client[__.DeleteMultiPathRouteRequest, emptypb.Empty]
}

// GetRoute calls sart.v1.FibApi.GetRoute.
func (c *fibApiClient) GetRoute(ctx context.Context, req *connect_go.Request[__.GetRouteRequest]) (*connect_go.Response[__.GetRouteResponse], error) {
	return c.getRoute.CallUnary(ctx, req)
}

// ListRoutes calls sart.v1.FibApi.ListRoutes.
func (c *fibApiClient) ListRoutes(ctx context.Context, req *connect_go.Request[__.ListRoutesRequest]) (*connect_go.Response[__.ListRoutesResponse], error) {
	return c.listRoutes.CallUnary(ctx, req)
}

// AddRoute calls sart.v1.FibApi.AddRoute.
func (c *fibApiClient) AddRoute(ctx context.Context, req *connect_go.Request[__.AddRouteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.addRoute.CallUnary(ctx, req)
}

// DeleteRoute calls sart.v1.FibApi.DeleteRoute.
func (c *fibApiClient) DeleteRoute(ctx context.Context, req *connect_go.Request[__.DeleteRouteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteRoute.CallUnary(ctx, req)
}

// AddMultiPathRoute calls sart.v1.FibApi.AddMultiPathRoute.
func (c *fibApiClient) AddMultiPathRoute(ctx context.Context, req *connect_go.Request[__.AddMultiPathRouteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.addMultiPathRoute.CallUnary(ctx, req)
}

// DeleteMultiPathRoute calls sart.v1.FibApi.DeleteMultiPathRoute.
func (c *fibApiClient) DeleteMultiPathRoute(ctx context.Context, req *connect_go.Request[__.DeleteMultiPathRouteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteMultiPathRoute.CallUnary(ctx, req)
}

// FibApiHandler is an implementation of the sart.v1.FibApi service.
type FibApiHandler interface {
	GetRoute(context.Context, *connect_go.Request[__.GetRouteRequest]) (*connect_go.Response[__.GetRouteResponse], error)
	ListRoutes(context.Context, *connect_go.Request[__.ListRoutesRequest]) (*connect_go.Response[__.ListRoutesResponse], error)
	AddRoute(context.Context, *connect_go.Request[__.AddRouteRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteRoute(context.Context, *connect_go.Request[__.DeleteRouteRequest]) (*connect_go.Response[emptypb.Empty], error)
	AddMultiPathRoute(context.Context, *connect_go.Request[__.AddMultiPathRouteRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteMultiPathRoute(context.Context, *connect_go.Request[__.DeleteMultiPathRouteRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewFibApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFibApiHandler(svc FibApiHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/sart.v1.FibApi/GetRoute", connect_go.NewUnaryHandler(
		"/sart.v1.FibApi/GetRoute",
		svc.GetRoute,
		opts...,
	))
	mux.Handle("/sart.v1.FibApi/ListRoutes", connect_go.NewUnaryHandler(
		"/sart.v1.FibApi/ListRoutes",
		svc.ListRoutes,
		opts...,
	))
	mux.Handle("/sart.v1.FibApi/AddRoute", connect_go.NewUnaryHandler(
		"/sart.v1.FibApi/AddRoute",
		svc.AddRoute,
		opts...,
	))
	mux.Handle("/sart.v1.FibApi/DeleteRoute", connect_go.NewUnaryHandler(
		"/sart.v1.FibApi/DeleteRoute",
		svc.DeleteRoute,
		opts...,
	))
	mux.Handle("/sart.v1.FibApi/AddMultiPathRoute", connect_go.NewUnaryHandler(
		"/sart.v1.FibApi/AddMultiPathRoute",
		svc.AddMultiPathRoute,
		opts...,
	))
	mux.Handle("/sart.v1.FibApi/DeleteMultiPathRoute", connect_go.NewUnaryHandler(
		"/sart.v1.FibApi/DeleteMultiPathRoute",
		svc.DeleteMultiPathRoute,
		opts...,
	))
	return "/sart.v1.FibApi/", mux
}

// UnimplementedFibApiHandler returns CodeUnimplemented from all methods.
type UnimplementedFibApiHandler struct{}

func (UnimplementedFibApiHandler) GetRoute(context.Context, *connect_go.Request[__.GetRouteRequest]) (*connect_go.Response[__.GetRouteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.FibApi.GetRoute is not implemented"))
}

func (UnimplementedFibApiHandler) ListRoutes(context.Context, *connect_go.Request[__.ListRoutesRequest]) (*connect_go.Response[__.ListRoutesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.FibApi.ListRoutes is not implemented"))
}

func (UnimplementedFibApiHandler) AddRoute(context.Context, *connect_go.Request[__.AddRouteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.FibApi.AddRoute is not implemented"))
}

func (UnimplementedFibApiHandler) DeleteRoute(context.Context, *connect_go.Request[__.DeleteRouteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.FibApi.DeleteRoute is not implemented"))
}

func (UnimplementedFibApiHandler) AddMultiPathRoute(context.Context, *connect_go.Request[__.AddMultiPathRouteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.FibApi.AddMultiPathRoute is not implemented"))
}

func (UnimplementedFibApiHandler) DeleteMultiPathRoute(context.Context, *connect_go.Request[__.DeleteMultiPathRouteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.FibApi.DeleteMultiPathRoute is not implemented"))
}
