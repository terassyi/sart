// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bgp.proto

package sartv1connect

import (
	__ "."
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BgpApiName is the fully-qualified name of the BgpApi service.
	BgpApiName = "sart.v1.BgpApi"
)

// BgpApiClient is a client for the sart.v1.BgpApi service.
type BgpApiClient interface {
	Health(context.Context, *connect_go.Request[__.HealthRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetBgpInfo(context.Context, *connect_go.Request[__.GetBgpInfoRequest]) (*connect_go.Response[__.GetBgpInfoResponse], error)
	GetNeighbor(context.Context, *connect_go.Request[__.GetNeighborRequest]) (*connect_go.Response[__.GetNeighborResponse], error)
	// rpc ListNeighbor(ListNeighborRequest) returns (ListNeighborResponse);
	GetPath(context.Context, *connect_go.Request[__.GetPathRequest]) (*connect_go.Response[__.GetPathResponse], error)
	SetAS(context.Context, *connect_go.Request[__.SetASRequest]) (*connect_go.Response[emptypb.Empty], error)
	SetRouterId(context.Context, *connect_go.Request[__.SetRouterIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	AddPeer(context.Context, *connect_go.Request[__.AddPeerRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeletePeer(context.Context, *connect_go.Request[__.DeletePeerRequest]) (*connect_go.Response[emptypb.Empty], error)
	AddPath(context.Context, *connect_go.Request[__.AddPathRequest]) (*connect_go.Response[__.AddPathResponse], error)
	DeletePath(context.Context, *connect_go.Request[__.DeletePathRequest]) (*connect_go.Response[__.DeletePathResponse], error)
}

// NewBgpApiClient constructs a client for the sart.v1.BgpApi service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBgpApiClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BgpApiClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bgpApiClient{
		health: connect_go.NewClient[__.HealthRequest, emptypb.Empty](
			httpClient,
			baseURL+"/sart.v1.BgpApi/Health",
			opts...,
		),
		getBgpInfo: connect_go.NewClient[__.GetBgpInfoRequest, __.GetBgpInfoResponse](
			httpClient,
			baseURL+"/sart.v1.BgpApi/GetBgpInfo",
			opts...,
		),
		getNeighbor: connect_go.NewClient[__.GetNeighborRequest, __.GetNeighborResponse](
			httpClient,
			baseURL+"/sart.v1.BgpApi/GetNeighbor",
			opts...,
		),
		getPath: connect_go.NewClient[__.GetPathRequest, __.GetPathResponse](
			httpClient,
			baseURL+"/sart.v1.BgpApi/GetPath",
			opts...,
		),
		setAS: connect_go.NewClient[__.SetASRequest, emptypb.Empty](
			httpClient,
			baseURL+"/sart.v1.BgpApi/SetAS",
			opts...,
		),
		setRouterId: connect_go.NewClient[__.SetRouterIdRequest, emptypb.Empty](
			httpClient,
			baseURL+"/sart.v1.BgpApi/SetRouterId",
			opts...,
		),
		addPeer: connect_go.NewClient[__.AddPeerRequest, emptypb.Empty](
			httpClient,
			baseURL+"/sart.v1.BgpApi/AddPeer",
			opts...,
		),
		deletePeer: connect_go.NewClient[__.DeletePeerRequest, emptypb.Empty](
			httpClient,
			baseURL+"/sart.v1.BgpApi/DeletePeer",
			opts...,
		),
		addPath: connect_go.NewClient[__.AddPathRequest, __.AddPathResponse](
			httpClient,
			baseURL+"/sart.v1.BgpApi/AddPath",
			opts...,
		),
		deletePath: connect_go.NewClient[__.DeletePathRequest, __.DeletePathResponse](
			httpClient,
			baseURL+"/sart.v1.BgpApi/DeletePath",
			opts...,
		),
	}
}

// bgpApiClient implements BgpApiClient.
type bgpApiClient struct {
	health      *connect_go.Client[__.HealthRequest, emptypb.Empty]
	getBgpInfo  *connect_go.Client[__.GetBgpInfoRequest, __.GetBgpInfoResponse]
	getNeighbor *connect_go.Client[__.GetNeighborRequest, __.GetNeighborResponse]
	getPath     *connect_go.Client[__.GetPathRequest, __.GetPathResponse]
	setAS       *connect_go.Client[__.SetASRequest, emptypb.Empty]
	setRouterId *connect_go.Client[__.SetRouterIdRequest, emptypb.Empty]
	addPeer     *connect_go.Client[__.AddPeerRequest, emptypb.Empty]
	deletePeer  *connect_go.Client[__.DeletePeerRequest, emptypb.Empty]
	addPath     *connect_go.Client[__.AddPathRequest, __.AddPathResponse]
	deletePath  *connect_go.Client[__.DeletePathRequest, __.DeletePathResponse]
}

// Health calls sart.v1.BgpApi.Health.
func (c *bgpApiClient) Health(ctx context.Context, req *connect_go.Request[__.HealthRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.health.CallUnary(ctx, req)
}

// GetBgpInfo calls sart.v1.BgpApi.GetBgpInfo.
func (c *bgpApiClient) GetBgpInfo(ctx context.Context, req *connect_go.Request[__.GetBgpInfoRequest]) (*connect_go.Response[__.GetBgpInfoResponse], error) {
	return c.getBgpInfo.CallUnary(ctx, req)
}

// GetNeighbor calls sart.v1.BgpApi.GetNeighbor.
func (c *bgpApiClient) GetNeighbor(ctx context.Context, req *connect_go.Request[__.GetNeighborRequest]) (*connect_go.Response[__.GetNeighborResponse], error) {
	return c.getNeighbor.CallUnary(ctx, req)
}

// GetPath calls sart.v1.BgpApi.GetPath.
func (c *bgpApiClient) GetPath(ctx context.Context, req *connect_go.Request[__.GetPathRequest]) (*connect_go.Response[__.GetPathResponse], error) {
	return c.getPath.CallUnary(ctx, req)
}

// SetAS calls sart.v1.BgpApi.SetAS.
func (c *bgpApiClient) SetAS(ctx context.Context, req *connect_go.Request[__.SetASRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.setAS.CallUnary(ctx, req)
}

// SetRouterId calls sart.v1.BgpApi.SetRouterId.
func (c *bgpApiClient) SetRouterId(ctx context.Context, req *connect_go.Request[__.SetRouterIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.setRouterId.CallUnary(ctx, req)
}

// AddPeer calls sart.v1.BgpApi.AddPeer.
func (c *bgpApiClient) AddPeer(ctx context.Context, req *connect_go.Request[__.AddPeerRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.addPeer.CallUnary(ctx, req)
}

// DeletePeer calls sart.v1.BgpApi.DeletePeer.
func (c *bgpApiClient) DeletePeer(ctx context.Context, req *connect_go.Request[__.DeletePeerRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deletePeer.CallUnary(ctx, req)
}

// AddPath calls sart.v1.BgpApi.AddPath.
func (c *bgpApiClient) AddPath(ctx context.Context, req *connect_go.Request[__.AddPathRequest]) (*connect_go.Response[__.AddPathResponse], error) {
	return c.addPath.CallUnary(ctx, req)
}

// DeletePath calls sart.v1.BgpApi.DeletePath.
func (c *bgpApiClient) DeletePath(ctx context.Context, req *connect_go.Request[__.DeletePathRequest]) (*connect_go.Response[__.DeletePathResponse], error) {
	return c.deletePath.CallUnary(ctx, req)
}

// BgpApiHandler is an implementation of the sart.v1.BgpApi service.
type BgpApiHandler interface {
	Health(context.Context, *connect_go.Request[__.HealthRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetBgpInfo(context.Context, *connect_go.Request[__.GetBgpInfoRequest]) (*connect_go.Response[__.GetBgpInfoResponse], error)
	GetNeighbor(context.Context, *connect_go.Request[__.GetNeighborRequest]) (*connect_go.Response[__.GetNeighborResponse], error)
	// rpc ListNeighbor(ListNeighborRequest) returns (ListNeighborResponse);
	GetPath(context.Context, *connect_go.Request[__.GetPathRequest]) (*connect_go.Response[__.GetPathResponse], error)
	SetAS(context.Context, *connect_go.Request[__.SetASRequest]) (*connect_go.Response[emptypb.Empty], error)
	SetRouterId(context.Context, *connect_go.Request[__.SetRouterIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	AddPeer(context.Context, *connect_go.Request[__.AddPeerRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeletePeer(context.Context, *connect_go.Request[__.DeletePeerRequest]) (*connect_go.Response[emptypb.Empty], error)
	AddPath(context.Context, *connect_go.Request[__.AddPathRequest]) (*connect_go.Response[__.AddPathResponse], error)
	DeletePath(context.Context, *connect_go.Request[__.DeletePathRequest]) (*connect_go.Response[__.DeletePathResponse], error)
}

// NewBgpApiHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBgpApiHandler(svc BgpApiHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/sart.v1.BgpApi/Health", connect_go.NewUnaryHandler(
		"/sart.v1.BgpApi/Health",
		svc.Health,
		opts...,
	))
	mux.Handle("/sart.v1.BgpApi/GetBgpInfo", connect_go.NewUnaryHandler(
		"/sart.v1.BgpApi/GetBgpInfo",
		svc.GetBgpInfo,
		opts...,
	))
	mux.Handle("/sart.v1.BgpApi/GetNeighbor", connect_go.NewUnaryHandler(
		"/sart.v1.BgpApi/GetNeighbor",
		svc.GetNeighbor,
		opts...,
	))
	mux.Handle("/sart.v1.BgpApi/GetPath", connect_go.NewUnaryHandler(
		"/sart.v1.BgpApi/GetPath",
		svc.GetPath,
		opts...,
	))
	mux.Handle("/sart.v1.BgpApi/SetAS", connect_go.NewUnaryHandler(
		"/sart.v1.BgpApi/SetAS",
		svc.SetAS,
		opts...,
	))
	mux.Handle("/sart.v1.BgpApi/SetRouterId", connect_go.NewUnaryHandler(
		"/sart.v1.BgpApi/SetRouterId",
		svc.SetRouterId,
		opts...,
	))
	mux.Handle("/sart.v1.BgpApi/AddPeer", connect_go.NewUnaryHandler(
		"/sart.v1.BgpApi/AddPeer",
		svc.AddPeer,
		opts...,
	))
	mux.Handle("/sart.v1.BgpApi/DeletePeer", connect_go.NewUnaryHandler(
		"/sart.v1.BgpApi/DeletePeer",
		svc.DeletePeer,
		opts...,
	))
	mux.Handle("/sart.v1.BgpApi/AddPath", connect_go.NewUnaryHandler(
		"/sart.v1.BgpApi/AddPath",
		svc.AddPath,
		opts...,
	))
	mux.Handle("/sart.v1.BgpApi/DeletePath", connect_go.NewUnaryHandler(
		"/sart.v1.BgpApi/DeletePath",
		svc.DeletePath,
		opts...,
	))
	return "/sart.v1.BgpApi/", mux
}

// UnimplementedBgpApiHandler returns CodeUnimplemented from all methods.
type UnimplementedBgpApiHandler struct{}

func (UnimplementedBgpApiHandler) Health(context.Context, *connect_go.Request[__.HealthRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.BgpApi.Health is not implemented"))
}

func (UnimplementedBgpApiHandler) GetBgpInfo(context.Context, *connect_go.Request[__.GetBgpInfoRequest]) (*connect_go.Response[__.GetBgpInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.BgpApi.GetBgpInfo is not implemented"))
}

func (UnimplementedBgpApiHandler) GetNeighbor(context.Context, *connect_go.Request[__.GetNeighborRequest]) (*connect_go.Response[__.GetNeighborResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.BgpApi.GetNeighbor is not implemented"))
}

func (UnimplementedBgpApiHandler) GetPath(context.Context, *connect_go.Request[__.GetPathRequest]) (*connect_go.Response[__.GetPathResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.BgpApi.GetPath is not implemented"))
}

func (UnimplementedBgpApiHandler) SetAS(context.Context, *connect_go.Request[__.SetASRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.BgpApi.SetAS is not implemented"))
}

func (UnimplementedBgpApiHandler) SetRouterId(context.Context, *connect_go.Request[__.SetRouterIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.BgpApi.SetRouterId is not implemented"))
}

func (UnimplementedBgpApiHandler) AddPeer(context.Context, *connect_go.Request[__.AddPeerRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.BgpApi.AddPeer is not implemented"))
}

func (UnimplementedBgpApiHandler) DeletePeer(context.Context, *connect_go.Request[__.DeletePeerRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.BgpApi.DeletePeer is not implemented"))
}

func (UnimplementedBgpApiHandler) AddPath(context.Context, *connect_go.Request[__.AddPathRequest]) (*connect_go.Response[__.AddPathResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.BgpApi.AddPath is not implemented"))
}

func (UnimplementedBgpApiHandler) DeletePath(context.Context, *connect_go.Request[__.DeletePathRequest]) (*connect_go.Response[__.DeletePathResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("sart.v1.BgpApi.DeletePath is not implemented"))
}
