// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: fib.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FibApi_GetRoute_FullMethodName             = "/sart.v1.FibApi/GetRoute"
	FibApi_ListRoutes_FullMethodName           = "/sart.v1.FibApi/ListRoutes"
	FibApi_AddRoute_FullMethodName             = "/sart.v1.FibApi/AddRoute"
	FibApi_DeleteRoute_FullMethodName          = "/sart.v1.FibApi/DeleteRoute"
	FibApi_AddMultiPathRoute_FullMethodName    = "/sart.v1.FibApi/AddMultiPathRoute"
	FibApi_DeleteMultiPathRoute_FullMethodName = "/sart.v1.FibApi/DeleteMultiPathRoute"
)

// FibApiClient is the client API for FibApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibApiClient interface {
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error)
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddMultiPathRoute(ctx context.Context, in *AddMultiPathRouteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteMultiPathRoute(ctx context.Context, in *DeleteMultiPathRouteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type fibApiClient struct {
	cc grpc.ClientConnInterface
}

func NewFibApiClient(cc grpc.ClientConnInterface) FibApiClient {
	return &fibApiClient{cc}
}

func (c *fibApiClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error) {
	out := new(GetRouteResponse)
	err := c.cc.Invoke(ctx, FibApi_GetRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibApiClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, FibApi_ListRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibApiClient) AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FibApi_AddRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibApiClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FibApi_DeleteRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibApiClient) AddMultiPathRoute(ctx context.Context, in *AddMultiPathRouteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FibApi_AddMultiPathRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibApiClient) DeleteMultiPathRoute(ctx context.Context, in *DeleteMultiPathRouteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, FibApi_DeleteMultiPathRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibApiServer is the server API for FibApi service.
// All implementations must embed UnimplementedFibApiServer
// for forward compatibility
type FibApiServer interface {
	GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error)
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	AddRoute(context.Context, *AddRouteRequest) (*empty.Empty, error)
	DeleteRoute(context.Context, *DeleteRouteRequest) (*empty.Empty, error)
	AddMultiPathRoute(context.Context, *AddMultiPathRouteRequest) (*empty.Empty, error)
	DeleteMultiPathRoute(context.Context, *DeleteMultiPathRouteRequest) (*empty.Empty, error)
	mustEmbedUnimplementedFibApiServer()
}

// UnimplementedFibApiServer must be embedded to have forward compatible implementations.
type UnimplementedFibApiServer struct {
}

func (UnimplementedFibApiServer) GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedFibApiServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedFibApiServer) AddRoute(context.Context, *AddRouteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedFibApiServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedFibApiServer) AddMultiPathRoute(context.Context, *AddMultiPathRouteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiPathRoute not implemented")
}
func (UnimplementedFibApiServer) DeleteMultiPathRoute(context.Context, *DeleteMultiPathRouteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMultiPathRoute not implemented")
}
func (UnimplementedFibApiServer) mustEmbedUnimplementedFibApiServer() {}

// UnsafeFibApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibApiServer will
// result in compilation errors.
type UnsafeFibApiServer interface {
	mustEmbedUnimplementedFibApiServer()
}

func RegisterFibApiServer(s grpc.ServiceRegistrar, srv FibApiServer) {
	s.RegisterService(&FibApi_ServiceDesc, srv)
}

func _FibApi_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibApiServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibApi_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibApiServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FibApi_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibApiServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibApi_ListRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibApiServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FibApi_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibApiServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibApi_AddRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibApiServer).AddRoute(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FibApi_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibApiServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibApi_DeleteRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibApiServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FibApi_AddMultiPathRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMultiPathRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibApiServer).AddMultiPathRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibApi_AddMultiPathRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibApiServer).AddMultiPathRoute(ctx, req.(*AddMultiPathRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FibApi_DeleteMultiPathRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMultiPathRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibApiServer).DeleteMultiPathRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibApi_DeleteMultiPathRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibApiServer).DeleteMultiPathRoute(ctx, req.(*DeleteMultiPathRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FibApi_ServiceDesc is the grpc.ServiceDesc for FibApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FibApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sart.v1.FibApi",
	HandlerType: (*FibApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoute",
			Handler:    _FibApi_GetRoute_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _FibApi_ListRoutes_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _FibApi_AddRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _FibApi_DeleteRoute_Handler,
		},
		{
			MethodName: "AddMultiPathRoute",
			Handler:    _FibApi_AddMultiPathRoute_Handler,
		},
		{
			MethodName: "DeleteMultiPathRoute",
			Handler:    _FibApi_DeleteMultiPathRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fib.proto",
}
