// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.6.1
// source: fib.proto

package proto

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// message
type IpVersion int32

const (
	IpVersion_Unkown IpVersion = 0
	IpVersion_V4     IpVersion = 2
	IpVersion_V6     IpVersion = 10
)

// Enum value maps for IpVersion.
var (
	IpVersion_name = map[int32]string{
		0:  "Unkown",
		2:  "V4",
		10: "V6",
	}
	IpVersion_value = map[string]int32{
		"Unkown": 0,
		"V4":     2,
		"V6":     10,
	}
)

func (x IpVersion) Enum() *IpVersion {
	p := new(IpVersion)
	*p = x
	return p
}

func (x IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_fib_proto_enumTypes[0].Descriptor()
}

func (IpVersion) Type() protoreflect.EnumType {
	return &file_fib_proto_enumTypes[0]
}

func (x IpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpVersion.Descriptor instead.
func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{0}
}

type AdministrativeDistance int32

const (
	AdministrativeDistance_ADConnected AdministrativeDistance = 0
	AdministrativeDistance_ADStatic    AdministrativeDistance = 1
	AdministrativeDistance_ADEBGP      AdministrativeDistance = 20
	AdministrativeDistance_ADOSPF      AdministrativeDistance = 110
	AdministrativeDistance_ADRIP       AdministrativeDistance = 120
	AdministrativeDistance_ADIBGP      AdministrativeDistance = 200
)

// Enum value maps for AdministrativeDistance.
var (
	AdministrativeDistance_name = map[int32]string{
		0:   "ADConnected",
		1:   "ADStatic",
		20:  "ADEBGP",
		110: "ADOSPF",
		120: "ADRIP",
		200: "ADIBGP",
	}
	AdministrativeDistance_value = map[string]int32{
		"ADConnected": 0,
		"ADStatic":    1,
		"ADEBGP":      20,
		"ADOSPF":      110,
		"ADRIP":       120,
		"ADIBGP":      200,
	}
)

func (x AdministrativeDistance) Enum() *AdministrativeDistance {
	p := new(AdministrativeDistance)
	*p = x
	return p
}

func (x AdministrativeDistance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdministrativeDistance) Descriptor() protoreflect.EnumDescriptor {
	return file_fib_proto_enumTypes[1].Descriptor()
}

func (AdministrativeDistance) Type() protoreflect.EnumType {
	return &file_fib_proto_enumTypes[1]
}

func (x AdministrativeDistance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdministrativeDistance.Descriptor instead.
func (AdministrativeDistance) EnumDescriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{1}
}

type Protocol int32

const (
	Protocol_Unspec   Protocol = 0
	Protocol_Redirect Protocol = 1
	Protocol_Kernel   Protocol = 2
	Protocol_Boot     Protocol = 3
	Protocol_Static   Protocol = 4
	Protocol_Bgp      Protocol = 186
	Protocol_IsIs     Protocol = 187
	Protocol_Ospf     Protocol = 188
	Protocol_Rip      Protocol = 189
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0:   "Unspec",
		1:   "Redirect",
		2:   "Kernel",
		3:   "Boot",
		4:   "Static",
		186: "Bgp",
		187: "IsIs",
		188: "Ospf",
		189: "Rip",
	}
	Protocol_value = map[string]int32{
		"Unspec":   0,
		"Redirect": 1,
		"Kernel":   2,
		"Boot":     3,
		"Static":   4,
		"Bgp":      186,
		"IsIs":     187,
		"Ospf":     188,
		"Rip":      189,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_fib_proto_enumTypes[2].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_fib_proto_enumTypes[2]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{2}
}

type Type int32

const (
	Type_UnspecType  Type = 0
	Type_Unicast     Type = 1
	Type_Local       Type = 2
	Type_Broadcast   Type = 3
	Type_Anycast     Type = 4
	Type_Multicast   Type = 5
	Type_Blackhole   Type = 6
	Type_Unreachable Type = 7
	Type_Prohibit    Type = 8
	Type_Throw       Type = 9
	Type_Nat         Type = 10
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:  "UnspecType",
		1:  "Unicast",
		2:  "Local",
		3:  "Broadcast",
		4:  "Anycast",
		5:  "Multicast",
		6:  "Blackhole",
		7:  "Unreachable",
		8:  "Prohibit",
		9:  "Throw",
		10: "Nat",
	}
	Type_value = map[string]int32{
		"UnspecType":  0,
		"Unicast":     1,
		"Local":       2,
		"Broadcast":   3,
		"Anycast":     4,
		"Multicast":   5,
		"Blackhole":   6,
		"Unreachable": 7,
		"Prohibit":    8,
		"Throw":       9,
		"Nat":         10,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fib_proto_enumTypes[3].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_fib_proto_enumTypes[3]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{3}
}

type Scope int32

const (
	Scope_Universe Scope = 0
	Scope_Site     Scope = 200
	Scope_Link     Scope = 253
	Scope_Host     Scope = 254
	Scope_Nowhere  Scope = 255
)

// Enum value maps for Scope.
var (
	Scope_name = map[int32]string{
		0:   "Universe",
		200: "Site",
		253: "Link",
		254: "Host",
		255: "Nowhere",
	}
	Scope_value = map[string]int32{
		"Universe": 0,
		"Site":     200,
		"Link":     253,
		"Host":     254,
		"Nowhere":  255,
	}
)

func (x Scope) Enum() *Scope {
	p := new(Scope)
	*p = x
	return p
}

func (x Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_fib_proto_enumTypes[4].Descriptor()
}

func (Scope) Type() protoreflect.EnumType {
	return &file_fib_proto_enumTypes[4]
}

func (x Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scope.Descriptor instead.
func (Scope) EnumDescriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{4}
}

type NextHop_NextHopFlags int32

const (
	NextHop_EMPTY      NextHop_NextHopFlags = 0
	NextHop_DEAD       NextHop_NextHopFlags = 1
	NextHop_PERVASIVE  NextHop_NextHopFlags = 2
	NextHop_ONLINK     NextHop_NextHopFlags = 3
	NextHop_OFFLOAD    NextHop_NextHopFlags = 4
	NextHop_LINKDOWN   NextHop_NextHopFlags = 16
	NextHop_UNRESOLVED NextHop_NextHopFlags = 32
)

// Enum value maps for NextHop_NextHopFlags.
var (
	NextHop_NextHopFlags_name = map[int32]string{
		0:  "EMPTY",
		1:  "DEAD",
		2:  "PERVASIVE",
		3:  "ONLINK",
		4:  "OFFLOAD",
		16: "LINKDOWN",
		32: "UNRESOLVED",
	}
	NextHop_NextHopFlags_value = map[string]int32{
		"EMPTY":      0,
		"DEAD":       1,
		"PERVASIVE":  2,
		"ONLINK":     3,
		"OFFLOAD":    4,
		"LINKDOWN":   16,
		"UNRESOLVED": 32,
	}
)

func (x NextHop_NextHopFlags) Enum() *NextHop_NextHopFlags {
	p := new(NextHop_NextHopFlags)
	*p = x
	return p
}

func (x NextHop_NextHopFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHop_NextHopFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_fib_proto_enumTypes[5].Descriptor()
}

func (NextHop_NextHopFlags) Type() protoreflect.EnumType {
	return &file_fib_proto_enumTypes[5]
}

func (x NextHop_NextHopFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHop_NextHopFlags.Descriptor instead.
func (NextHop_NextHopFlags) EnumDescriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{9, 0}
}

type GetRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       uint32    `protobuf:"varint,1,opt,name=table,proto3" json:"table,omitempty"`
	Version     IpVersion `protobuf:"varint,2,opt,name=version,proto3,enum=sart.v1.IpVersion" json:"version,omitempty"`
	Destination string    `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *GetRouteRequest) Reset() {
	*x = GetRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteRequest) ProtoMessage() {}

func (x *GetRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteRequest.ProtoReflect.Descriptor instead.
func (*GetRouteRequest) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{0}
}

func (x *GetRouteRequest) GetTable() uint32 {
	if x != nil {
		return x.Table
	}
	return 0
}

func (x *GetRouteRequest) GetVersion() IpVersion {
	if x != nil {
		return x.Version
	}
	return IpVersion_Unkown
}

func (x *GetRouteRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type GetRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route *Route `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *GetRouteResponse) Reset() {
	*x = GetRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouteResponse) ProtoMessage() {}

func (x *GetRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouteResponse.ProtoReflect.Descriptor instead.
func (*GetRouteResponse) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{1}
}

func (x *GetRouteResponse) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type ListRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table   uint32    `protobuf:"varint,1,opt,name=table,proto3" json:"table,omitempty"`
	Version IpVersion `protobuf:"varint,2,opt,name=version,proto3,enum=sart.v1.IpVersion" json:"version,omitempty"`
}

func (x *ListRoutesRequest) Reset() {
	*x = ListRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesRequest) ProtoMessage() {}

func (x *ListRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesRequest.ProtoReflect.Descriptor instead.
func (*ListRoutesRequest) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{2}
}

func (x *ListRoutesRequest) GetTable() uint32 {
	if x != nil {
		return x.Table
	}
	return 0
}

func (x *ListRoutesRequest) GetVersion() IpVersion {
	if x != nil {
		return x.Version
	}
	return IpVersion_Unkown
}

type ListRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *ListRoutesResponse) Reset() {
	*x = ListRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesResponse) ProtoMessage() {}

func (x *ListRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesResponse.ProtoReflect.Descriptor instead.
func (*ListRoutesResponse) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{3}
}

func (x *ListRoutesResponse) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type AddRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table   uint32    `protobuf:"varint,1,opt,name=table,proto3" json:"table,omitempty"`
	Version IpVersion `protobuf:"varint,2,opt,name=version,proto3,enum=sart.v1.IpVersion" json:"version,omitempty"`
	Route   *Route    `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	Replace bool      `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (x *AddRouteRequest) Reset() {
	*x = AddRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRouteRequest) ProtoMessage() {}

func (x *AddRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRouteRequest.ProtoReflect.Descriptor instead.
func (*AddRouteRequest) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{4}
}

func (x *AddRouteRequest) GetTable() uint32 {
	if x != nil {
		return x.Table
	}
	return 0
}

func (x *AddRouteRequest) GetVersion() IpVersion {
	if x != nil {
		return x.Version
	}
	return IpVersion_Unkown
}

func (x *AddRouteRequest) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *AddRouteRequest) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

type DeleteRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       uint32    `protobuf:"varint,1,opt,name=table,proto3" json:"table,omitempty"`
	Version     IpVersion `protobuf:"varint,2,opt,name=version,proto3,enum=sart.v1.IpVersion" json:"version,omitempty"`
	Destination string    `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *DeleteRouteRequest) Reset() {
	*x = DeleteRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouteRequest) ProtoMessage() {}

func (x *DeleteRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouteRequest) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteRouteRequest) GetTable() uint32 {
	if x != nil {
		return x.Table
	}
	return 0
}

func (x *DeleteRouteRequest) GetVersion() IpVersion {
	if x != nil {
		return x.Version
	}
	return IpVersion_Unkown
}

func (x *DeleteRouteRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type AddMultiPathRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       uint32     `protobuf:"varint,1,opt,name=table,proto3" json:"table,omitempty"`
	Version     IpVersion  `protobuf:"varint,2,opt,name=version,proto3,enum=sart.v1.IpVersion" json:"version,omitempty"`
	Destination string     `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	NextHops    []*NextHop `protobuf:"bytes,4,rep,name=next_hops,json=nextHops,proto3" json:"next_hops,omitempty"`
}

func (x *AddMultiPathRouteRequest) Reset() {
	*x = AddMultiPathRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMultiPathRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMultiPathRouteRequest) ProtoMessage() {}

func (x *AddMultiPathRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMultiPathRouteRequest.ProtoReflect.Descriptor instead.
func (*AddMultiPathRouteRequest) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{6}
}

func (x *AddMultiPathRouteRequest) GetTable() uint32 {
	if x != nil {
		return x.Table
	}
	return 0
}

func (x *AddMultiPathRouteRequest) GetVersion() IpVersion {
	if x != nil {
		return x.Version
	}
	return IpVersion_Unkown
}

func (x *AddMultiPathRouteRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *AddMultiPathRouteRequest) GetNextHops() []*NextHop {
	if x != nil {
		return x.NextHops
	}
	return nil
}

type DeleteMultiPathRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       uint32    `protobuf:"varint,1,opt,name=table,proto3" json:"table,omitempty"`
	Version     IpVersion `protobuf:"varint,2,opt,name=version,proto3,enum=sart.v1.IpVersion" json:"version,omitempty"`
	Destination string    `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Gateways    []string  `protobuf:"bytes,4,rep,name=gateways,proto3" json:"gateways,omitempty"`
}

func (x *DeleteMultiPathRouteRequest) Reset() {
	*x = DeleteMultiPathRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMultiPathRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMultiPathRouteRequest) ProtoMessage() {}

func (x *DeleteMultiPathRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMultiPathRouteRequest.ProtoReflect.Descriptor instead.
func (*DeleteMultiPathRouteRequest) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteMultiPathRouteRequest) GetTable() uint32 {
	if x != nil {
		return x.Table
	}
	return 0
}

func (x *DeleteMultiPathRouteRequest) GetVersion() IpVersion {
	if x != nil {
		return x.Version
	}
	return IpVersion_Unkown
}

func (x *DeleteMultiPathRouteRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *DeleteMultiPathRouteRequest) GetGateways() []string {
	if x != nil {
		return x.Gateways
	}
	return nil
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table       uint32                 `protobuf:"varint,1,opt,name=table,proto3" json:"table,omitempty"`
	Version     IpVersion              `protobuf:"varint,2,opt,name=version,proto3,enum=sart.v1.IpVersion" json:"version,omitempty"`
	Destination string                 `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Protocol    Protocol               `protobuf:"varint,4,opt,name=protocol,proto3,enum=sart.v1.Protocol" json:"protocol,omitempty"`
	Scope       Scope                  `protobuf:"varint,5,opt,name=scope,proto3,enum=sart.v1.Scope" json:"scope,omitempty"`
	Type        Type                   `protobuf:"varint,6,opt,name=type,proto3,enum=sart.v1.Type" json:"type,omitempty"`
	NextHops    []*NextHop             `protobuf:"bytes,7,rep,name=next_hops,json=nextHops,proto3" json:"next_hops,omitempty"`
	Source      string                 `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	Ad          AdministrativeDistance `protobuf:"varint,9,opt,name=ad,proto3,enum=sart.v1.AdministrativeDistance" json:"ad,omitempty"`
	Priority    uint32                 `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"`
	Ibgp        bool                   `protobuf:"varint,11,opt,name=ibgp,proto3" json:"ibgp,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{8}
}

func (x *Route) GetTable() uint32 {
	if x != nil {
		return x.Table
	}
	return 0
}

func (x *Route) GetVersion() IpVersion {
	if x != nil {
		return x.Version
	}
	return IpVersion_Unkown
}

func (x *Route) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Route) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_Unspec
}

func (x *Route) GetScope() Scope {
	if x != nil {
		return x.Scope
	}
	return Scope_Universe
}

func (x *Route) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_UnspecType
}

func (x *Route) GetNextHops() []*NextHop {
	if x != nil {
		return x.NextHops
	}
	return nil
}

func (x *Route) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Route) GetAd() AdministrativeDistance {
	if x != nil {
		return x.Ad
	}
	return AdministrativeDistance_ADConnected
}

func (x *Route) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Route) GetIbgp() bool {
	if x != nil {
		return x.Ibgp
	}
	return false
}

type NextHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway   string               `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Weight    uint32               `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Flags     NextHop_NextHopFlags `protobuf:"varint,3,opt,name=flags,proto3,enum=sart.v1.NextHop_NextHopFlags" json:"flags,omitempty"`
	Interface uint32               `protobuf:"varint,4,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *NextHop) Reset() {
	*x = NextHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fib_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHop) ProtoMessage() {}

func (x *NextHop) ProtoReflect() protoreflect.Message {
	mi := &file_fib_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHop.ProtoReflect.Descriptor instead.
func (*NextHop) Descriptor() ([]byte, []int) {
	return file_fib_proto_rawDescGZIP(), []int{9}
}

func (x *NextHop) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *NextHop) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *NextHop) GetFlags() NextHop_NextHopFlags {
	if x != nil {
		return x.Flags
	}
	return NextHop_EMPTY
}

func (x *NextHop) GetInterface() uint32 {
	if x != nil {
		return x.Interface
	}
	return 0
}

var File_fib_proto protoreflect.FileDescriptor

var file_fib_proto_rawDesc = []byte{
	0x0a, 0x09, 0x66, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x61, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x77, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x61,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0f,
	0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x22, 0x7a, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xaf, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x73, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x61, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2f, 0x0a, 0x02, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x02, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x62, 0x67, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69,
	0x62, 0x67, 0x70, 0x22, 0xf9, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x22, 0x69, 0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x45, 0x52,
	0x56, 0x41, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x10, 0x12,
	0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x20, 0x2a,
	0x27, 0x0a, 0x09, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x34, 0x10, 0x02,
	0x12, 0x06, 0x0a, 0x02, 0x56, 0x36, 0x10, 0x0a, 0x2a, 0x67, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x44, 0x45, 0x42, 0x47, 0x50, 0x10, 0x14, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x44, 0x4f, 0x53, 0x50, 0x46, 0x10, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x52,
	0x49, 0x50, 0x10, 0x78, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x44, 0x49, 0x42, 0x47, 0x50, 0x10, 0xc8,
	0x01, 0x2a, 0x70, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x03, 0x42, 0x67, 0x70,
	0x10, 0xba, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x49, 0x73, 0x49, 0x73, 0x10, 0xbb, 0x01, 0x12, 0x09,
	0x0a, 0x04, 0x4f, 0x73, 0x70, 0x66, 0x10, 0xbc, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x69, 0x70,
	0x10, 0xbd, 0x01, 0x2a, 0x9b, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6e, 0x79, 0x63, 0x61, 0x73, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x07, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x61, 0x74, 0x10,
	0x0a, 0x2a, 0x44, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65,
	0x10, 0xc8, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0xfd, 0x01, 0x12, 0x09,
	0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x10, 0xfe, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x4e, 0x6f, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x10, 0xff, 0x01, 0x32, 0xb8, 0x03, 0x0a, 0x06, 0x46, 0x69, 0x62, 0x41,
	0x70, 0x69, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x18,
	0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x1a, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x41, 0x64,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x21, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fib_proto_rawDescOnce sync.Once
	file_fib_proto_rawDescData = file_fib_proto_rawDesc
)

func file_fib_proto_rawDescGZIP() []byte {
	file_fib_proto_rawDescOnce.Do(func() {
		file_fib_proto_rawDescData = protoimpl.X.CompressGZIP(file_fib_proto_rawDescData)
	})
	return file_fib_proto_rawDescData
}

var file_fib_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_fib_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_fib_proto_goTypes = []interface{}{
	(IpVersion)(0),                      // 0: sart.v1.IpVersion
	(AdministrativeDistance)(0),         // 1: sart.v1.AdministrativeDistance
	(Protocol)(0),                       // 2: sart.v1.Protocol
	(Type)(0),                           // 3: sart.v1.Type
	(Scope)(0),                          // 4: sart.v1.Scope
	(NextHop_NextHopFlags)(0),           // 5: sart.v1.NextHop.NextHopFlags
	(*GetRouteRequest)(nil),             // 6: sart.v1.GetRouteRequest
	(*GetRouteResponse)(nil),            // 7: sart.v1.GetRouteResponse
	(*ListRoutesRequest)(nil),           // 8: sart.v1.ListRoutesRequest
	(*ListRoutesResponse)(nil),          // 9: sart.v1.ListRoutesResponse
	(*AddRouteRequest)(nil),             // 10: sart.v1.AddRouteRequest
	(*DeleteRouteRequest)(nil),          // 11: sart.v1.DeleteRouteRequest
	(*AddMultiPathRouteRequest)(nil),    // 12: sart.v1.AddMultiPathRouteRequest
	(*DeleteMultiPathRouteRequest)(nil), // 13: sart.v1.DeleteMultiPathRouteRequest
	(*Route)(nil),                       // 14: sart.v1.Route
	(*NextHop)(nil),                     // 15: sart.v1.NextHop
	(*empty.Empty)(nil),                 // 16: google.protobuf.Empty
}
var file_fib_proto_depIdxs = []int32{
	0,  // 0: sart.v1.GetRouteRequest.version:type_name -> sart.v1.IpVersion
	14, // 1: sart.v1.GetRouteResponse.route:type_name -> sart.v1.Route
	0,  // 2: sart.v1.ListRoutesRequest.version:type_name -> sart.v1.IpVersion
	14, // 3: sart.v1.ListRoutesResponse.routes:type_name -> sart.v1.Route
	0,  // 4: sart.v1.AddRouteRequest.version:type_name -> sart.v1.IpVersion
	14, // 5: sart.v1.AddRouteRequest.route:type_name -> sart.v1.Route
	0,  // 6: sart.v1.DeleteRouteRequest.version:type_name -> sart.v1.IpVersion
	0,  // 7: sart.v1.AddMultiPathRouteRequest.version:type_name -> sart.v1.IpVersion
	15, // 8: sart.v1.AddMultiPathRouteRequest.next_hops:type_name -> sart.v1.NextHop
	0,  // 9: sart.v1.DeleteMultiPathRouteRequest.version:type_name -> sart.v1.IpVersion
	0,  // 10: sart.v1.Route.version:type_name -> sart.v1.IpVersion
	2,  // 11: sart.v1.Route.protocol:type_name -> sart.v1.Protocol
	4,  // 12: sart.v1.Route.scope:type_name -> sart.v1.Scope
	3,  // 13: sart.v1.Route.type:type_name -> sart.v1.Type
	15, // 14: sart.v1.Route.next_hops:type_name -> sart.v1.NextHop
	1,  // 15: sart.v1.Route.ad:type_name -> sart.v1.AdministrativeDistance
	5,  // 16: sart.v1.NextHop.flags:type_name -> sart.v1.NextHop.NextHopFlags
	6,  // 17: sart.v1.FibApi.GetRoute:input_type -> sart.v1.GetRouteRequest
	8,  // 18: sart.v1.FibApi.ListRoutes:input_type -> sart.v1.ListRoutesRequest
	10, // 19: sart.v1.FibApi.AddRoute:input_type -> sart.v1.AddRouteRequest
	11, // 20: sart.v1.FibApi.DeleteRoute:input_type -> sart.v1.DeleteRouteRequest
	12, // 21: sart.v1.FibApi.AddMultiPathRoute:input_type -> sart.v1.AddMultiPathRouteRequest
	13, // 22: sart.v1.FibApi.DeleteMultiPathRoute:input_type -> sart.v1.DeleteMultiPathRouteRequest
	7,  // 23: sart.v1.FibApi.GetRoute:output_type -> sart.v1.GetRouteResponse
	9,  // 24: sart.v1.FibApi.ListRoutes:output_type -> sart.v1.ListRoutesResponse
	16, // 25: sart.v1.FibApi.AddRoute:output_type -> google.protobuf.Empty
	16, // 26: sart.v1.FibApi.DeleteRoute:output_type -> google.protobuf.Empty
	16, // 27: sart.v1.FibApi.AddMultiPathRoute:output_type -> google.protobuf.Empty
	16, // 28: sart.v1.FibApi.DeleteMultiPathRoute:output_type -> google.protobuf.Empty
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_fib_proto_init() }
func file_fib_proto_init() {
	if File_fib_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fib_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMultiPathRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMultiPathRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fib_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fib_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fib_proto_goTypes,
		DependencyIndexes: file_fib_proto_depIdxs,
		EnumInfos:         file_fib_proto_enumTypes,
		MessageInfos:      file_fib_proto_msgTypes,
	}.Build()
	File_fib_proto = out.File
	file_fib_proto_rawDesc = nil
	file_fib_proto_goTypes = nil
	file_fib_proto_depIdxs = nil
}
